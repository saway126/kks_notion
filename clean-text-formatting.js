// üßπ ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ÌïòÍ≥† ÍπîÎÅîÌïú ÏùºÎ∞ò ÌÖçÏä§Ìä∏Î°ú Ï†ïÎ¶¨
const { Client } = require('@notionhq/client');

const NOTION_API_KEY = process.env.NOTION_API_KEY || 'your-notion-api-key-here';
const NOTION_PAGE_ID = '2697705af35080d29bd3ec3447918eab';

const notion = new Client({
  auth: NOTION_API_KEY,
});

class TextFormattingCleaner {
  constructor() {
    this.notion = notion;
  }

  // üßπ ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ïÏù¥ Ìè¨Ìï®Îêú ÌÖçÏä§Ìä∏Îì§ÏùÑ ÍπîÎÅîÌïòÍ≤å Ï†ïÎ¶¨
  async cleanTextFormatting() {
    try {
      console.log("üßπ ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ÌïòÍ≥† ÍπîÎÅîÌïú ÌÖçÏä§Ìä∏Î°ú Ï†ïÎ¶¨...");
      
      // ÌîÑÎ°úÏ†ùÌä∏ Î∏îÎ°ùÎì§ Ï∞æÍ∏∞
      const response = await this.notion.blocks.children.list({
        block_id: NOTION_PAGE_ID,
      });
      
      // ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ïÏù¥ Ìè¨Ìï®Îêú Î∏îÎ°ùÎì§ Ï∞æÍ∏∞
      const blocksWithMarkdown = response.results.filter(block => 
        (block.type === 'paragraph' && this.hasMarkdownSyntax(block.paragraph?.rich_text[0]?.text?.content)) ||
        (block.type === 'bulleted_list_item' && this.hasMarkdownSyntax(block.bulleted_list_item?.rich_text[0]?.text?.content)) ||
        (block.type === 'heading_3' && this.hasMarkdownSyntax(block.heading_3?.rich_text[0]?.text?.content))
      );
      
      console.log(`üìÑ ${blocksWithMarkdown.length}Í∞úÏùò ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Î∏îÎ°ù Î∞úÍ≤¨`);
      
      // Í∞Å Î∏îÎ°ùÏùò ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞
      for (const block of blocksWithMarkdown) {
        await this.cleanBlockMarkdown(block);
      }
      
      console.log("‚úÖ ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ ÏôÑÎ£å");
      
    } catch (error) {
      console.error("‚ùå ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ Ïã§Ìå®:", error.message);
    }
  }

  // üîç ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ïÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  hasMarkdownSyntax(text) {
    if (!text) return false;
    return text.includes('**') || text.includes('*') || text.includes('##') || text.includes('###');
  }

  // üßπ Í∞úÎ≥Ñ Î∏îÎ°ùÏùò ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞
  async cleanBlockMarkdown(block) {
    try {
      let cleanText = '';
      
      if (block.type === 'paragraph') {
        cleanText = this.cleanText(block.paragraph?.rich_text[0]?.text?.content || '');
        
        await this.notion.blocks.update({
          block_id: block.id,
          paragraph: {
            rich_text: [
              {
                type: "text",
                text: {
                  content: cleanText
                }
              }
            ]
          }
        });
        
      } else if (block.type === 'bulleted_list_item') {
        cleanText = this.cleanText(block.bulleted_list_item?.rich_text[0]?.text?.content || '');
        
        await this.notion.blocks.update({
          block_id: block.id,
          bulleted_list_item: {
            rich_text: [
              {
                type: "text",
                text: {
                  content: cleanText
                }
              }
            ]
          }
        });
        
      } else if (block.type === 'heading_3') {
        cleanText = this.cleanText(block.heading_3?.rich_text[0]?.text?.content || '');
        
        await this.notion.blocks.update({
          block_id: block.id,
          heading_3: {
            rich_text: [
              {
                type: "text",
                text: {
                  content: cleanText
                }
              }
            ]
          }
        });
      }
      
      console.log(`‚úÖ Î∏îÎ°ù Ï†ïÎ¶¨ ÏôÑÎ£å: ${cleanText.substring(0, 50)}...`);
      
    } catch (error) {
      console.error("‚ùå Î∏îÎ°ù Ï†ïÎ¶¨ Ïã§Ìå®:", error.message);
    }
  }

  // üßπ ÌÖçÏä§Ìä∏ÏóêÏÑú ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞
  cleanText(text) {
    if (!text) return '';
    
    // **ÌÖçÏä§Ìä∏** ‚Üí ÌÖçÏä§Ìä∏
    text = text.replace(/\*\*(.*?)\*\*/g, '$1');
    
    // *ÌÖçÏä§Ìä∏* ‚Üí ÌÖçÏä§Ìä∏  
    text = text.replace(/\*(.*?)\*/g, '$1');
    
    // ## Ï†úÎ™© ‚Üí Ï†úÎ™©
    text = text.replace(/##\s*/g, '');
    
    // ### Ï†úÎ™© ‚Üí Ï†úÎ™©
    text = text.replace(/###\s*/g, '');
    
    // Î∂àÌïÑÏöîÌïú Í≥µÎ∞± Ï†ïÎ¶¨
    text = text.replace(/\s+/g, ' ').trim();
    
    return text;
  }

  // üé® ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™ÖÎì§ÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïû¨ÏûëÏÑ±
  async rewriteProjectDescriptions() {
    try {
      console.log("üé® ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™ÖÎì§ÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïû¨ÏûëÏÑ±...");
      
      // ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™ÖÎì§
      const naturalDescriptions = {
        'GreenWear': {
          title: "GreenWear",
          description: "Ïã§Ï†úÎ°ú ESP32Î•º ÏÇ¨ÏÑú ÏÑºÏÑúÎ•º Ïó∞Í≤∞Ìï¥Î≥¥Î©¥ÏÑú ÎßåÎì† ÌîÑÎ°úÏ†ùÌä∏ÏòàÏöî. Ïã¨Î∞ïÏàò, ÏÇ∞ÏÜåÌè¨ÌôîÎèÑ, Ï≤¥Ïò®ÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï∏°Ï†ïÌïòÍ≥† LEDÎ°ú ÏÉÅÌÉúÎ•º ÌëúÏãúÌï©ÎãàÎã§. Ïõπ ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑúÎèÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î™®ÎãàÌÑ∞ÎßÅÌï† Ïàò ÏûàÏñ¥Ïöî.",
          techStack: "Í∏∞Ïà† Ïä§ÌÉù: ESP32, Vue.js, React Native, Node.js, MySQL, AI Î∂ÑÏÑù",
          duration: "Í∞úÎ∞ú Í∏∞Í∞Ñ: 2024ÎÖÑ 3Ïõî - 2024ÎÖÑ 6Ïõî",
          role: "Îã¥Îãπ Ïó≠Ìï†: ÌíÄÏä§ÌÉù Í∞úÎ∞úÏûê (ÌïòÎìúÏõ®Ïñ¥ + ÏÜåÌîÑÌä∏Ïõ®Ïñ¥)",
          demo: "Live Demo: https://greenwear-demo.vercel.app/",
          github: "Source Code: https://github.com/saway126/greenwear"
        },
        'HRIM': {
          title: "HRIM",
          description: "ÌïúÌôî BEYOND SW Ï∫†ÌîÑÏóêÏÑú ÌåÄÏúºÎ°ú Í∞úÎ∞úÌïú ESG Î∂ÑÏÑù ÎåÄÏãúÎ≥¥ÎìúÏûÖÎãàÎã§. ÌôòÍ≤Ω, ÏÇ¨Ìöå, ÏßÄÎ∞∞Íµ¨Ï°∞ Îç∞Ïù¥ÌÑ∞Î•º ÏãúÍ∞ÅÌôîÌïòÍ≥† Î∂ÑÏÑùÌï† Ïàò ÏûàÏñ¥Ïöî. Chart.jsÎ•º ÌôúÏö©Ìï¥ÏÑú Îã§ÏñëÌïú Í∑∏ÎûòÌîÑÏôÄ Ï∞®Ìä∏Î•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§.",
          techStack: "Í∏∞Ïà† Ïä§ÌÉù: Vue.js, Spring Boot, Chart.js, MySQL, Docker",
          duration: "Í∞úÎ∞ú Í∏∞Í∞Ñ: 2024ÎÖÑ 7Ïõî - 2024ÎÖÑ 8Ïõî",
          role: "Îã¥Îãπ Ïó≠Ìï†: ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûê",
          demo: "Live Demo: https://www.imhr.kro.kr/login",
          github: "Source Code: https://github.com/beyond-sw-camp/be12-fin-HRIM-IMHR-FE"
        },
        'QueDoc': {
          title: "QueDoc",
          description: "Î≥ëÏõê ÏòàÏïΩÏùÑ Îçî Ìé∏Î¶¨ÌïòÍ≤å ÎßåÎì§Ïñ¥Î≥¥Í≥† Ïã∂Ïñ¥ÏÑú ÏãúÏûëÌïú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏâΩÍ≤å Î≥ëÏõêÏùÑ Ï∞æÍ≥† ÏòàÏïΩÌï† Ïàò ÏûàÎèÑÎ°ù UI/UXÏóê Ïã†Í≤Ω ÏçºÏñ¥Ïöî. ÎåÄÍ∏∞Ïó¥ ÌòÑÌô©ÎèÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
          techStack: "Í∏∞Ïà† Ïä§ÌÉù: Vue.js, Spring Boot, MySQL, Redis, AWS",
          duration: "Í∞úÎ∞ú Í∏∞Í∞Ñ: 2024ÎÖÑ 1Ïõî - 2024ÎÖÑ 4Ïõî",
          role: "Îã¥Îãπ Ïó≠Ìï†: ÌíÄÏä§ÌÉù Í∞úÎ∞úÏûê",
          demo: "Live Demo: https://www.quedoc.kro.kr/",
          github: "Source Code: https://github.com/saway126/QueDoc"
        },
        'Í∏∞Ïà† Î∏îÎ°úÍ∑∏': {
          title: "Í∏∞Ïà† Î∏îÎ°úÍ∑∏",
          description: "Í∞úÎ∞úÌïòÎ©¥ÏÑú Î∞∞Ïö¥ Í≤ÉÎì§ÏùÑ Ï†ïÎ¶¨ÌïòÍ≥† Í≥µÏú†ÌïòÎäî Î∏îÎ°úÍ∑∏ÏûÖÎãàÎã§. Jekyll Chirpy ÌÖåÎßàÎ•º Ïö∞Ï£º ÎèåÍ≥†Îûò Ïª®ÏÖâÏúºÎ°ú Ïª§Ïä§ÌÑ∞ÎßàÏù¥ÏßïÌñàÏñ¥Ïöî. Í∏ÄÎûòÏä§Î™®ÌîºÏ¶ò Ìö®Í≥ºÏôÄ Îã§ÌÅ¨/ÎùºÏù¥Ìä∏ ÌÖåÎßà ÌÜ†Í∏ÄÎèÑ Íµ¨ÌòÑÌñàÏäµÎãàÎã§.",
          techStack: "Í∏∞Ïà† Ïä§ÌÉù: Jekyll, Chirpy Theme, GitHub Pages, CSS, JavaScript",
          duration: "Í∞úÎ∞ú Í∏∞Í∞Ñ: 2023ÎÖÑ 12Ïõî - ÌòÑÏû¨",
          role: "Îã¥Îãπ Ïó≠Ìï†: Í∞úÎ∞úÏûê & Î∏îÎ°úÍ±∞",
          demo: "Live Demo: https://saway126.github.io/",
          github: "Source Code: https://github.com/saway126/saway126.github.io"
        }
      };
      
      // Í∞Å ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏÑ§Î™ÖÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïû¨ÏûëÏÑ±
      for (const [projectName, content] of Object.entries(naturalDescriptions)) {
        await this.rewriteProjectDescription(projectName, content);
      }
      
      console.log("‚úÖ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™ÖÎì§ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïû¨ÏûëÏÑ± ÏôÑÎ£å");
      
    } catch (error) {
      console.error("‚ùå ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö Ïû¨ÏûëÏÑ± Ïã§Ìå®:", error.message);
    }
  }

  // üéØ Í∞úÎ≥Ñ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö Ïû¨ÏûëÏÑ±
  async rewriteProjectDescription(projectName, content) {
    try {
      // ÌîÑÎ°úÏ†ùÌä∏ Î∏îÎ°ùÎì§ Ï∞æÍ∏∞
      const response = await this.notion.blocks.children.list({
        block_id: NOTION_PAGE_ID,
      });
      
      // Ìï¥Îãπ ÌîÑÎ°úÏ†ùÌä∏ Ï†úÎ™© Î∏îÎ°ù Ï∞æÍ∏∞
      const projectTitleBlock = response.results.find(block => 
        block.type === 'heading_3' && 
        block.heading_3.rich_text[0]?.text?.content?.includes(projectName)
      );
      
      if (projectTitleBlock) {
        // ÌîÑÎ°úÏ†ùÌä∏ Ï†úÎ™© Îã§ÏùåÏóê ÏûàÎäî Î∏îÎ°ùÎì§ Ï∞æÍ∏∞
        const projectIndex = response.results.findIndex(block => block.id === projectTitleBlock.id);
        const projectBlocks = response.results.slice(projectIndex + 1, projectIndex + 15);
        
        // Í∏∞Ï°¥ ÏÑ§Î™Ö Î∏îÎ°ùÎì§ ÏÇ≠Ï†ú
        for (const block of projectBlocks) {
          if (block.type === 'paragraph' || block.type === 'bulleted_list_item') {
            await this.notion.blocks.delete({
              block_id: block.id
            });
          }
        }
        
        // ÏÉàÎ°úÏö¥ ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏÑ§Î™Ö Ï∂îÍ∞Ä
        await this.notion.blocks.children.append({
          block_id: NOTION_PAGE_ID,
          children: [
            {
              type: "paragraph",
              paragraph: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.description
                    }
                  }
                ]
              }
            },
            {
              type: "bulleted_list_item",
              bulleted_list_item: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.techStack
                    }
                  }
                ]
              }
            },
            {
              type: "bulleted_list_item",
              bulleted_list_item: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.duration
                    }
                  }
                ]
              }
            },
            {
              type: "bulleted_list_item",
              bulleted_list_item: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.role
                    }
                  }
                ]
              }
            },
            {
              type: "bulleted_list_item",
              bulleted_list_item: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.demo
                    }
                  }
                ]
              }
            },
            {
              type: "bulleted_list_item",
              bulleted_list_item: {
                rich_text: [
                  {
                    type: "text",
                    text: {
                      content: content.github
                    }
                  }
                ]
              }
            }
          ]
        });
        
        console.log(`‚úÖ ${projectName} ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïû¨ÏûëÏÑ± ÏôÑÎ£å`);
      }
      
    } catch (error) {
      console.error(`‚ùå ${projectName} ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö Ïû¨ÏûëÏÑ± Ïã§Ìå®:`, error.message);
    }
  }

  // üéØ Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨ Ïã§Ìñâ
  async cleanAllText() {
    console.log("üßπ Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨ ÏãúÏûë...");
    
    await this.cleanTextFormatting();
    await this.rewriteProjectDescriptions();
    
    console.log("üéâ Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨ ÏôÑÎ£å!");
    console.log("‚ú® Ïù¥Ï†ú ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï ÏóÜÏù¥ ÍπîÎÅîÌïú ÏùºÎ∞ò ÌÖçÏä§Ìä∏Î°ú Ï†ïÎ¶¨ÎêòÏóàÏäµÎãàÎã§!");
  }
}

// Ïã§Ìñâ
const cleaner = new TextFormattingCleaner();
cleaner.cleanAllText();
